{"version":3,"sources":["component/card-list.component/card-componenet.jsx","component/card-list.component/card-list.jsx","component/card-list.component/search.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","p","className","alt","src","family","id","name","email","no","CardList","map","key","Search","placeholder","handlechange","style","width","Form","Control","type","onChange","App","state","SearchField","this","filerfamily","filter","toLowerCase","includes","e","setState","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAGaA,G,YAAK,SAACC,GACf,OACJ,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAEI,OAAOC,GAAnC,4BACjB,4BAAI,2BAAIL,EAAEI,OAAOE,OACjB,2BAAIN,EAAEI,OAAOG,OACb,2BAAIP,EAAEI,OAAOI,OCLJC,G,MAAU,SAACT,GAAD,OACf,yBAAKC,UAAU,aACVD,EAAEI,OAAOM,KAAI,SAAAN,GAAM,OAE3B,kBAAC,EAAD,CAAMO,IAAKP,EAAOC,GAAID,OAAQA,U,gBCHtBQ,G,MAAO,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aAI9B,OACA,yBAAKC,MAJQ,CACTC,MAAM,QAIN,kBAACC,EAAA,EAAKC,QAAN,CACDC,KAAK,SACLlB,UAAU,SACVY,YAAaA,EACbO,SAAWN,OCmEHO,E,kDAvEb,aAAc,IAAD,8BACX,gBAEKC,MAAM,CACTlB,OAAO,CACL,CACEC,GAAG,EACHC,KAAK,SACLC,MAAM,6BACNC,GAAG,WAEL,CACEH,GAAG,EACHC,KAAK,SACLC,MAAM,0BACNC,GAAG,UAEL,CACEH,GAAG,EACHC,KAAK,UACLC,MAAM,oBACNC,GAAG,SAEL,CACEH,GAAG,EACHC,KAAK,QACLC,MAAM,wBACNC,GAAG,QAEL,CACEH,GAAG,EACHC,KAAK,SACLC,MAAM,iBACNC,GAAG,OAEL,CACEH,GAAG,EACHC,KAAK,UACLC,MAAM,oBACNC,GAAG,UAEL,CACEH,GAAG,EACHC,KAAK,OACLC,MAAM,gBACNC,GAAG,UAGPe,YAAa,IAhDJ,E,qDAmDN,IAAD,SACyBC,KAAKF,MAA5BlB,EADF,EACEA,OAASmB,EADX,EACWA,YACXE,EAAcrB,EAAOsB,QAAO,SAAAtB,GAAM,OACtCA,EAAOE,KAAKqB,cAAcC,SAASL,EAAYI,kBAEjD,OACF,6BACE,2CACA,kBAAC,EAAD,CACAd,YAAY,YACZC,aAAc,SAAAe,GAAC,OAAG,EAAKC,SAAS,CAACP,YAAYM,EAAEE,OAAOC,WAGxD,kBAAC,EAAD,CAAU5B,OAASqB,S,GAlEDQ,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.179d0d20.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card-component.css'\r\n\r\nexport const Card=(p) =>{\r\n    return(\r\n<div className=\"card-component\">\r\n<img alt=\"Family\" src={`https://robohash.org/${p.family.id}?set=set2&size=180x200`} />\r\n    <h3><i>{p.family.name}</i></h3>\r\n    <b>{p.family.email}</b>\r\n    <i>{p.family.no}</i>\r\n    </div>\r\n)}","import React from 'react'\r\nimport {Card} from  './card-componenet'\r\nimport './card-list.css'\r\n\r\nexport const CardList= (p) =>(\r\n        <div className='card-list'>\r\n            {p.family.map(family=>(\r\n     //<i>{family.id}-{family.name}</i>\r\n     <Card key={family.id} family={family} />\r\n))}\r\n    </div>\r\n)\r\n","import React from 'react'\r\nimport './Search.css'\r\nimport {Form} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport const Search=({placeholder,handlechange})=>{\r\n    var mystyle ={\r\n        width:\"50%\"\r\n    }\r\n    return(\r\n    <div style={mystyle} >\r\n        <Form.Control \r\n       type=\"search\" \r\n       className=\"search\"\r\n       placeholder={placeholder} \r\n       onChange ={handlechange}/>\r\n\r\n</div>\r\n) \r\n    }\r\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './component/card-list.component/card-list'\nimport { Search } from './component/card-list.component/search';\n//import {Form} from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import {card} from './component/card-list.component/card-componenet'\n\nclass App extends React.Component{\n  \n  constructor(){\n    super();\n\n    this.state={\n      family:[\n        {\n          id:1,\n          name:'Manali',\n          email:'manalisharma2311@gmail.com',\n          no:123456789\n        },\n        {\n          id:2,\n          name:'Mousam',\n          email:'mousam.sharma@gmail.com',\n          no:12345678\n        },\n        {\n          id:3,\n          name:'Sheetal',\n          email:'sheetal@gmail.com',\n          no:1234567\n        },\n        {\n          id:4,\n          name:'Vipin',\n          email:'vipinsharma@gmail.com',\n          no:123456\n        },\n        {\n          id:5,\n          name:'Sakshi',\n          email:'saks@gmail.com',\n          no:12345\n        },\n        {\n          id:6,\n          name:'sarthak',\n          email:'sarthak@gmail.com',\n          no:12345785\n        },\n        {\n          id:7,\n          name:'Atul',\n          email:'atu@gmail.com',\n          no:12345000\n        }\n      ],\n      SearchField :''\n    }\n  }\nrender(){\n  const { family , SearchField }=this.state;\n  const filerfamily = family.filter(family=>\n    family.name.toLowerCase().includes(SearchField.toLowerCase())\n    );\n  return(\n<div>\n  <h1>Office Life</h1>\n  <Search\n  placeholder=\"Search...\" \n  handlechange={e=> this.setState({SearchField:e.target.value})} \n  />\n\n<CardList family ={filerfamily}/>\n </div>\n  )\n \n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}